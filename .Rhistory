setwd("~/GitHub/For-Partners")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
write.csv(N, file= paste("Output/",Analyte[1],".csv"), row.names = F)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
library(ggplot2) # For plotting with ggplot
library(lubridate) # For working with dates in datasheets
library(httr)
library(tidyverse)
library(gh) # for loading from private repo
library(gitcreds)# for loading from private repo
library(dplyr)
### Download CEDEN/SURF data from IETC private repository
tmp <- tempfile()
CS_Limited <- gh("https://raw.githubusercontent.com/WWU-IETC-R-Collab/CEDENSURF-mod/30YRS/Data/Output/CEDENSURF_Limited_FixedUnits.csv",
.token = gh_token(),
.destfile = tmp)
Limited <- read_csv(tmp)
names(Limited)[names(Limited) == "Subregion"] <- "RiskRegion"
# Create empty matrix with correct number of rows
scaffold<- data.frame(matrix(ncol = 1, nrow = 372))
# Fill with complete series of months
scaffold$Date<- seq(as.Date("1989/1/1"), as.Date("2019/12/31"), "months")
# Simplify to month:date
Dates <- tidyr::separate(scaffold, Date, c('Year', 'Month', 'Day')) %>%
select(Year, Month)
head(Dates)
# Create text month column
MonthTable<- data.frame(Month = c("01", "02", "03", "04", "05", "06", "07",
"08", "09", "10", "11", "12"),
MonthT = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
"Aug", "Sep", "Oct", "Nov", "Dec")) %>%
mutate(Season = case_when(Month %in% c("11", "12", "01", "02", "03", "04") ~ 'Wet',
Month %in% c("05", "06", "07", "08", "09", "10") ~ 'Dry'))
Dates<- merge(Dates, MonthTable, by="Month", all.x = T)
head(Dates)
#Clean environment for next steps
rm(scaffold, tmp, CS_Limited, MonthTable)
#Split date into Year, Month, Day in separate columns so we can analyze by month
Limited$FullDate <- Limited$Date # Duplicate date column
Limited <- tidyr::separate(Limited, Date, c('Year', 'Month', 'Day')) # Split original date column by Year, Month, and Day
# summarize
Summary <- Limited %>%
filter(Analyte %in% c("bifenthrin", "chlorpyrifos", "diazinon","triadimefon", "myclobutanil",            "paraquat_dichloride", "malathion",
"mercury", "copper")) %>%
group_by(RiskRegion, Year, Month, Analyte) %>%
summarize(n = n(),
mean = mean(Result),
sd = sd(Result),
min = min(Result),
max = max(Result))
# Create vectors to loop over
Region<- unique(Limited$RiskRegion)
SelectList <- c("bifenthrin", "chlorpyrifos", "diazinon",
"paraquat_dichloride", "malathion",
"mercury", "copper")
# Create empty list to store intermediate / iterated output
Result <- list()
# Double Loop (Let's see how this goes!)
for (i in 1:length(SelectList)){
A_sub <- Summary %>% filter(Analyte == SelectList[i]) # subset records for one Analyte
for(z in 1:length(Region)){
B_sub <- A_sub %>%
filter(RiskRegion == Region[z]) # subset records for one RR
M <- merge(Dates, B_sub, by=c("Year", "Month"), all = TRUE) ### Merge so that retains date rows that have no matching data in sampling records
M$RiskRegion <- Region[z] #fill blank rows with appropriate risk region
M$Analyte <- SelectList[i]
M$FullDate<- paste(M$Year, M$Month)
Result[[z]]<- M
}
M<- do.call(rbind,Result) # recombine all result df
N<- M %>% arrange(Year, Month)
Analyte <- SelectList[i]
write.csv(N, file= paste("Output/",Analyte[1],".csv"), row.names = F)
}
# Restrict to desired date range
Summary <- Summary %>% filter(between(Year,1995,2015))
# Create vectors to loop over
Region<- c("Yolo Bypass" ,"Sacramento River","South Delta",
"East Delta" ,"Lower Sacramento River",
"Lower San Joaquin River","Confluence",
"SE Suisun","NE Suisun","Suisun Marsh",
"SW Suisun","NW Suisun")
SelectList <- c("bifenthrin", "chlorpyrifos", "diazinon","triadimefon", "myclobutanil",            "paraquat_dichloride", "malathion",
"mercury", "copper")
# Create empty list to store intermediate / iterated output
Result <- list()
##  Loop!
for (i in 1:length(SelectList)){
A_sub <- Summary %>% filter(Analyte == SelectList[i]) # subset records for one Analyte
for(z in 1:length(Region)){
B_sub <- A_sub %>%
filter(RiskRegion == Region[z]) # subset records for one RR
M <- merge(Dates, B_sub, by=c("Year", "Month"), all = TRUE) ### Merge so that retains date rows that have no matching data in sampling records
M$RiskRegion <- Region[z] #fill blank rows with appropriate risk region
M$Analyte <- SelectList[i]
M$FullDate<- paste(M$Year, M$Month)
Result[[z]]<- M
}
M<- do.call(rbind,Result) # recombine all result df
N<- M %>% arrange(Year, Month) %>%
select(FullDate, RiskRegion, Analyte, mean) %>%
rename(Result = mean) %>%
group_by(FullDate, RiskRegion, Analyte)%>%
pivot_wider(names_from = FullDate,
names_repair = "check_unique",
values_from = Result)
Analyte <- SelectList[i]
write.csv(N, file=paste(Analyte[1],"w",".csv"), row.names = F)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
library(ggplot2) # For plotting with ggplot
library(lubridate) # For working with dates in datasheets
library(httr)
library(tidyverse)
library(gh) # for loading from private repo
library(gitcreds)# for loading from private repo
library(dplyr)
library(ggplot2) # For plotting with ggplot
library(lubridate) # For working with dates in datasheets
library(httr)
library(tidyverse)
library(gh) # for loading from private repo
library(gitcreds)# for loading from private repo
library(dplyr)
### Download CEDEN/SURF data from IETC private repository
tmp <- tempfile()
CS_Limited <- gh("https://raw.githubusercontent.com/WWU-IETC-R-Collab/CEDENSURF-mod/30YRS_OrigRR/Data/Output/CEDENSURF_Limited_FixedUnits.csv",
.token = gh_token(),
.destfile = tmp)
Limited <- read_csv(tmp)
names(Limited)[names(Limited) == "Subregion"] <- "RiskRegion"
min(Limited$FullDate)
# Create empty matrix with correct number of rows
scaffold<- data.frame(matrix(ncol = 1, nrow = 372))
# Fill with complete series of months
scaffold$Date<- seq(as.Date("1995/1/1"), as.Date("2019/12/31"), "months")
# Create empty matrix with correct number of rows
scaffold<- data.frame(matrix(ncol = 1, nrow = 300))
# Fill with complete series of months
scaffold$Date<- seq(as.Date("1995/1/1"), as.Date("2019/12/31"), "months")
# Simplify to month:date
Dates <- tidyr::separate(scaffold, Date, c('Year', 'Month', 'Day')) %>%
select(Year, Month)
head(Dates)
# Create text month column
MonthTable<- data.frame(Month = c("01", "02", "03", "04", "05", "06", "07",
"08", "09", "10", "11", "12"),
MonthT = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
"Aug", "Sep", "Oct", "Nov", "Dec")) %>%
mutate(Season = case_when(Month %in% c("11", "12", "01", "02", "03", "04") ~ 'Wet',
Month %in% c("05", "06", "07", "08", "09", "10") ~ 'Dry'))
Dates<- merge(Dates, MonthTable, by="Month", all.x = T)
head(Dates)
#Clean environment for next steps
rm(scaffold, tmp, CS_Limited, MonthTable)
#Split date into Year, Month, Day in separate columns so we can analyze by month
Limited$FullDate <- Limited$Date # Duplicate date column
Limited <- tidyr::separate(Limited, Date, c('Year', 'Month', 'Day')) # Split original date column by Year, Month, and Day
# summarize
Summary <- Limited %>%
filter(Analyte %in% c("bifenthrin", "chlorpyrifos", "diazinon","triadimefon", "myclobutanil",            "paraquat_dichloride", "malathion",
"mercury", "copper")) %>%
group_by(RiskRegion, Year, Month, Analyte) %>%
summarize(n = n(),
mean = mean(Result),
sd = sd(Result),
min = min(Result),
max = max(Result))
# Create vectors to loop over
Region<- unique(Limited$RiskRegion)
SelectList <- c("bifenthrin", "chlorpyrifos", "diazinon",
"paraquat_dichloride", "malathion",
"mercury", "copper")
# Create empty list to store intermediate / iterated output
Result <- list()
# Double Loop (Let's see how this goes!)
for (i in 1:length(SelectList)){
A_sub <- Summary %>% filter(Analyte == SelectList[i]) # subset records for one Analyte
for(z in 1:length(Region)){
B_sub <- A_sub %>%
filter(RiskRegion == Region[z]) # subset records for one RR
M <- merge(Dates, B_sub, by=c("Year", "Month"), all = TRUE) ### Merge so that retains date rows that have no matching data in sampling records
M$RiskRegion <- Region[z] #fill blank rows with appropriate risk region
M$Analyte <- SelectList[i]
M$FullDate<- paste(M$Year, M$Month)
Result[[z]]<- M
}
M<- do.call(rbind,Result) # recombine all result df
N<- M %>% arrange(Year, Month)
Analyte <- SelectList[i]
write.csv(N, file= paste("Output/",Analyte[1],".csv"), row.names = F)
}
# Restrict to desired date range
Summary <- Summary %>% filter(between(Year,1995,2015))
# Create vectors to loop over
Region<- c("Yolo Bypass" ,"Sacramento River","South Delta",
"East Delta" ,"Lower Sacramento River",
"Lower San Joaquin River","Confluence",
"SE Suisun","NE Suisun","Suisun Marsh",
"SW Suisun","NW Suisun")
SelectList <- c("bifenthrin", "chlorpyrifos", "diazinon","triadimefon", "myclobutanil",            "paraquat_dichloride", "malathion",
"mercury", "copper")
# Create empty list to store intermediate / iterated output
Result <- list()
##  Loop!
for (i in 1:length(SelectList)){
A_sub <- Summary %>% filter(Analyte == SelectList[i]) # subset records for one Analyte
for(z in 1:length(Region)){
B_sub <- A_sub %>%
filter(RiskRegion == Region[z]) # subset records for one RR
M <- merge(Dates, B_sub, by=c("Year", "Month"), all = TRUE) ### Merge so that retains date rows that have no matching data in sampling records
M$RiskRegion <- Region[z] #fill blank rows with appropriate risk region
M$Analyte <- SelectList[i]
M$FullDate<- paste(M$Year, M$Month)
Result[[z]]<- M
}
M<- do.call(rbind,Result) # recombine all result df
N<- M %>% arrange(Year, Month) %>%
select(FullDate, RiskRegion, Analyte, mean) %>%
rename(Result = mean) %>%
group_by(FullDate, RiskRegion, Analyte)%>%
pivot_wider(names_from = FullDate,
names_repair = "check_unique",
values_from = Result)
Analyte <- SelectList[i]
write.csv(N, file=paste("Output/",Analyte[1],"w",".csv"), row.names = F)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
### Download CEDEN/SURF data from IETC private repository
tmp <- tempfile()
CS_Limited <- gh("https://raw.githubusercontent.com/WWU-IETC-R-Collab/CEDENSURF-mod/30YRS/Data/Output/CEDENSURF_Limited_FixedUnits.csv",
.token = gh_token(),
.destfile = tmp)
Limited <- read_csv(tmp)
names(Limited)[names(Limited) == "Subregion"] <- "RiskRegion"
min(Limited$FullDate)
rm(list=ls)
rm()
rm(ls)
rm(list = ls())
library(ggplot2) # For plotting with ggplot
library(lubridate) # For working with dates in datasheets
library(httr)
library(tidyverse)
library(gh) # for loading from private repo
library(gitcreds)# for loading from private repo
library(dplyr)
